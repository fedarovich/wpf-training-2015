//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;

namespace Effects.CustomEffects {
    
    public class ChromaKeyEffect : ShaderEffect {

        public static readonly DependencyProperty InputProperty = 
            ShaderEffect.RegisterPixelShaderSamplerProperty(
                "Input", typeof(ChromaKeyEffect), 0);

        public static readonly DependencyProperty ForegroundProperty = 
            ShaderEffect.RegisterPixelShaderSamplerProperty(
                "Foreground", typeof(ChromaKeyEffect), 1);

        public static readonly DependencyProperty ChromaKeyProperty = DependencyProperty.Register(
            "ChromaKey", typeof(Color), typeof(ChromaKeyEffect), 
            new UIPropertyMetadata(Color.FromArgb(255, 0, 255, 98), PixelShaderConstantCallback(0)));
        
        public static readonly DependencyProperty ToleranceProperty = DependencyProperty.Register(
            "Tolerance", typeof(double), typeof(ChromaKeyEffect), 
            new UIPropertyMetadata(0.5, PixelShaderConstantCallback(1)));
        public ChromaKeyEffect() {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("/CustomEffects/ChromaKeyEffect.ps", UriKind.Relative);
            this.PixelShader = pixelShader;

            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(ForegroundProperty);
            this.UpdateShaderValue(ChromaKeyProperty);
            this.UpdateShaderValue(ToleranceProperty);
        }

        public Brush Input {
            get {
                return ((Brush)(this.GetValue(InputProperty)));
            }
            set {
                this.SetValue(InputProperty, value);
            }
        }

        public Brush Foreground {
            get {
                return ((Brush)(this.GetValue(ForegroundProperty)));
            }
            set {
                this.SetValue(ForegroundProperty, value);
            }
        }

        /// <summary>The color that becomes transparent.</summary>
        public Color ChromaKey {
            get {
                return ((Color)(this.GetValue(ChromaKeyProperty)));
            }
            set {
                this.SetValue(ChromaKeyProperty, value);
            }
        }

        /// <summary>The tolerance in color differences.</summary>
        public double Tolerance {
            get {
                return ((double)(this.GetValue(ToleranceProperty)));
            }
            set {
                this.SetValue(ToleranceProperty, value);
            }
        }
    }
}
